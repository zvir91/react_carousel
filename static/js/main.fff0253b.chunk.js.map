{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["getIndex","index","toString","Carousel","_ref","images","itemWidth","getWidth","getFrame","getStep","getAnimationDuration","makeInfinite","step","frameSize","animationDuration","infinite","_useState","useState","_useState2","_slicedToArray","scrollPosition","setScrollPosition","dis","length","useEffect","carusel","document","querySelector","items","querySelectorAll","element","forEach","item","style","width","concat","transform","transitionDuration","_jsxs","_Fragment","children","className","_jsx","map","image","src","alt","type","onClick","newPosition","disabled","htmlFor","id","value","onChange","event","target","currentTarget","App","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","key","_this2","_this$state","this","setState","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fff0253b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './Carousel.scss';\n\ninterface A {\n  images: string[],\n  itemWidth: number,\n  getWidth: (value: number) => void;\n  getFrame: (value: number) => void;\n  getStep: (value: number) => void;\n  getAnimationDuration:(value: number) => void;\n  makeInfinite: (value: boolean) => void;\n  step: number,\n  frameSize: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst getIndex = (index: number) => {\n  const result = index + 1;\n\n  return result.toString();\n};\n\nconst Carousel = (\n  {\n    images,\n    itemWidth,\n    getWidth,\n    getFrame,\n    getStep,\n    getAnimationDuration,\n    makeInfinite,\n    step,\n    frameSize,\n    animationDuration,\n    infinite,\n  }:A,\n) => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const dis = (images.length - frameSize) * itemWidth === scrollPosition;\n\n  const scrolLeft = () => {\n    const width = itemWidth * step;\n    let newPosition = scrollPosition - width;\n\n    if (newPosition < 0) {\n      if (infinite) {\n        newPosition = (images.length - frameSize) * itemWidth;\n      } else {\n        newPosition = 0;\n      }\n    }\n\n    setScrollPosition(newPosition);\n  };\n\n  const scrolRight = () => {\n    const width = itemWidth * step;\n    let newPosition = scrollPosition + width;\n\n    if (newPosition > (images.length - frameSize) * itemWidth) {\n      if (infinite) {\n        newPosition = 0;\n      } else {\n        newPosition = (images.length - frameSize) * itemWidth;\n      }\n    }\n\n    setScrollPosition(newPosition);\n  };\n\n  useEffect(() => {\n    const carusel = document.querySelector('.Carousel') as HTMLElement;\n    const items = document.querySelectorAll('img');\n    const element = document.querySelector('.Carousel__list') as HTMLElement;\n\n    items.forEach((item) => {\n      const result = item;\n\n      result.style.width = `${itemWidth}px`;\n    });\n\n    element.style.transform = `translate(-${scrollPosition}px)`;\n    element.style.transitionDuration = `${animationDuration}ms`;\n\n    carusel.style.width = `${frameSize * itemWidth}px`;\n  }, [itemWidth, scrollPosition, frameSize, step,\n    animationDuration, infinite]);\n\n  return (\n    <>\n      <div className=\"Carousel\">\n        <ul className=\"Carousel__list\">\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={getIndex(index)}\n              />\n            </li>\n          ))}\n        </ul>\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={scrolLeft}\n            disabled={scrollPosition === 0 && !infinite}\n          >\n            ← Prew\n          </button>\n          <button\n            type=\"button\"\n            onClick={scrolRight}\n            disabled={dis && !infinite}\n          >\n            Next →\n          </button>\n        </div>\n      </div>\n      <div className=\"Carousel-inputs\">\n        <label\n          htmlFor=\"width\"\n        >\n          Item width:\n        </label>\n        <input\n          type=\"text\"\n          id=\"width\"\n          value={itemWidth}\n          onChange={(event) => getWidth(+event.target.value)}\n        />\n        <label\n          htmlFor=\"frameSize\"\n        >\n          Frame size:\n        </label>\n        <input\n          id=\"frameSize\"\n          type=\"text\"\n          value={frameSize}\n          onChange={(event) => getFrame(+event.target.value)}\n        />\n        <label\n          htmlFor=\"step\"\n        >\n          Step:\n        </label>\n        <input\n          id=\"step\"\n          type=\"text\"\n          value={step}\n          onChange={(event) => getStep(+event.target.value)}\n        />\n        <label\n          htmlFor=\"animationduration\"\n        >\n          Animation duration:\n        </label>\n        <input\n          type=\"text\"\n          id=\"animationduration\"\n          value={animationDuration}\n          onChange={(event) => {\n            getAnimationDuration(+event.currentTarget.value);\n          }}\n        />\n        <label htmlFor=\"infinite\">\n          Infinite:\n        </label>\n        <input\n          id=\"infinite\"\n          type=\"checkbox\"\n          // value={infinite}\n          onChange={() => {\n            makeInfinite(!infinite);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  itemWidth: number;\n  frameSize: number;\n  animationDuration: number;\n  infinite:boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    frameSize: 3,\n    step: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      step,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          getWidth={(value: number) => {\n            this.setState({ itemWidth: value });\n          }}\n          getFrame={(value: number) => {\n            this.setState({ frameSize: value });\n          }}\n          getStep={(value: number) => {\n            this.setState({ step: value });\n          }}\n          getAnimationDuration={(value:number) => {\n            this.setState({ animationDuration: value });\n          }}\n          makeInfinite={(value:boolean) => {\n            this.setState({ infinite: value });\n          }}\n          step={step}\n          frameSize={frameSize}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}